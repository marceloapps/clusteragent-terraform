# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: "otel-bonitao"
fullnameOverride: "otel-bonitao"

config:
  exporters:
    jaeger:
      endpoint: "http://localhost:14250"
      tls:
        insecure: true    
  processors:
    memory_limiter:
      limit_mib: 100
      check_interval: 5s    
  receivers:
    jaeger:
      protocols:
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_http:
          endpoint: 0.0.0.0:14268
        thrift_compact:
          endpoint: 0.0.0.0:6831
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
              - targets:
                  - ${MY_POD_IP}:8888
    zipkin:
      endpoint: 0.0.0.0:9411
  service:
    pipelines:
      traces:
        exporters:
          - jaeger
        processors:
          - memory_limiter
        receivers:
          - otlp
          - jaeger
          - zipkin

# Shared params for agentCollector daemonset and standaloneCollector deployment pods.
# Can be overridden here or for any component independently using the same keys.

image:
  # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
  repository: otel/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  tag: ""
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: otelcontribcol
  extraArgs: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

clusterRole:
  create: false
  clusterRoleBinding:
    name: ""

priorityClassName: ""

ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    hostPort: 6831
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP
  health:
    enabled: true
    containerPort: 13133
    servicePort: 13133
    hostPort: 13133
    protocol: TCP

agentCollector:
  enabled: true
  containerLogs:
    enabled: true
  resources:
    limits:
      cpu: 256m
      memory: 512Mi

standaloneCollector:
  enabled: false
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2Gi

service:
  type: ClusterIP
  annotations: {}

podMonitor:
  enabled: false
  metricsEndpoints: {}
  # - port: prometheus

  # additional labels for the PodMonitor
  extraLabels: {}
  #   release: kube-prometheus-stack

serviceMonitor:
  enabled: false
  metricsEndpoints: {}
  # - port: metrics
  #   interval: 15s

  # additional labels for the ServiceMonitor
  extraLabels: {}
  #  release: kube-prometheus-stack